/*Класс это кирпичик, деталь лего с заданными вами свойствами.
Из них вы строите свою программу. Весь функционал хранится внутри.
Все данные хранятся внутри. Вы создаете удобную форму представления данных.
Например треугольник. Если представить его как класс, его полями могут стать
ребра фигуры или сразу точки. Точка тоже может быть классом, а её полями могут
стать координаты х и y.*/

/*Небольшая ремарка. Дальше будет рассматриваться объектно-ориентированны подход
Немного про ООП. Когда вы создаете переменную и под нее выделяется память - для 
компьютера это Объект. К объекту можно обращаться по имени, вызывать его методы.
Когда мы удаляем объект, перестаем выделять ему память, мы уже не можем к нему обратиться.
Грубо говоря мы пишем классы, чтобы создавать объекты с заданными свойствами и функционалом
тема самым постеменно выстраивая нужну среду обработки данных, совй мини-завод.*/

//Рассмотрим на бытовом уровне) Вот у нас есть Стиральная машина. Попробуем ее описать
class Стиралка // название типа, как int или void, но своё
{
    //теперь опишем свойства
    //вначале мы опишем, какие переменые нужны в работе класса
    //Примечание: в большинстве случаев лучше делать поля приватными,
    //чтобы нелья было просто так из любого места программы менять значения полей
    //Б - безопасность
    //Далее за <var> условно примем <какой-то тип данных>

    //поля
    private var Барабан //очень важное поле, туда мы кладем одежду
    private var ОтсекДляПорошка //опять таки, очень важное поле, без порошка никуда
    private var[] НастройкиДляСтирки //приборная панель, тут будем хранить настройки
    private int Статус = 0 //сюда выводятся коды ошибок работы Стиралки
    
    //Почему поля приватные, а методы публичные, зачем эта прослойка?
    //Это гарантия того, что с вашими полями можно взаимодействовать только так и никак иначе.
    //Меньше головной боли, больше порядка в программе. Жестки рамки взаимодействия объектов.

    //Методы
    public void КладемВещиЧерезДверцу() 
    {
        var Шмотки = Console.ReadLine() //приготовили вещи
        Барабан = Шмотки //открыли дверь, положили в барабан вещи
    }
    //Как так ещё раз такое же имя метода?! Учитель, вы не правы!
    //Это нарывается перегрузка метода. В зависимости от того входных данных,
    //программа будет выбирать какой вариант ей использовать.
    public void КладемВещиЧерезДверцу(var Шмотки) //Альтернативно кладем вещи
    {
        Барабан = Шмотки //открыли дверь, положили в барабан вещи
    }
    public void СыпемПорошокВОтсек()
    {
        var Порошок = Console.ReadLine() //достали порошок
        ОтсекДляПорошка = Порошок //открыли отсек, насыпали порошек в отксек
    }
    public void ТыкаемКнопкиНаПанели(var Параметр1, ..., var ПараметрN) //например метод с входными данными
    {
        НастройкиДляСтирки = {Параметр1, ..., ПараметрN}
    }
    public int НачатьПостирушки()
    {
        Проверяем статус, если не 0, возвращаем ошибку, останавливаем программу
        Проверяем, что все отсеки закрыты, если нет, вернуть код ошибки, остановить программу
        Проверяем, что вода подключена, если нет, вернуть код ошибки, остановить программу
        Статус = Постирушки() //получаем статус
        Если постирушки прошли не удачно, возвращаем ошибку, останавливаем программу
        Если удачно, возвращеем 0, что говорит нам о удачном завершении
    }
    
    //А почему этот метод приватный?
    //А потому что он не взаимодействует с пользователем. Это внутренний алгоритм.
    //И запускать его должна автоматика проверив перед этим много условий.
    private int Постирушки()
    {
        Крутим Барабан
        Что-то делаем короче
        Если где-то затык, возвращеем ошибку, останавливаем программу
        Если все гуд, результат будет в барабане
        Т.к раблотаем с ним
        При этом поля private нельзя достать просто так извне.
    }
    public void ВытаскиваемШмотки()
    {
        Console.WriteLine(Барабан) //достали шмотки из барабана, выдаем пользователю
    }
    //А тут как? Тут же входные данные и там и там отсутствуют.
    //А тут отличие в возвращаемом типе данных. Тут нужно внимательно следить, где и как вы
    //используете метод.
    public var ВытаскиваемШмотки()
    {
        return Барабан //достали шмотки из барабана, положили в тазик
    }
}

//ну а теперь Мэйн. Мэйн похожа на инструкицю для пользователя, который пришел стирать вещи.
public void Main()
{
    Стиралка стиралка = new Стиралка() //вот тут мы создали объект и выделили память
    //Дальше будем взаимодействовать с объектом, использовать его функции.
    стиралка.КладемВещиЧерезДверцу()
    или
    var тазик = Шмотки
    стиралка.КладемВещиЧерезДверцу(Тазик)
    стиралка.СыпемПорошокВОтсек()
    ...
    думаем, какие нам нужны параметры
    ...
    стиралка.ТыкаемКнопкиНаПанели(параметры которые надумали)
    стиралка.НачатьПостирушки()
    стиралка.ВытаскиваемШмотки()
    или
    тазик = стиралка.ВытаскиваемШмотки()
}


//Полезные материалы:
ООП в картинках: https://habr.com/ru/post/463125/
Классы: https://metanit.com/sharp/tutorial/3.1.php
Класс Program и метод Main. Программы верхнего уровня: https://metanit.com/sharp/tutorial/1.4.php
Перегрузка методов: https://metanit.com/sharp/tutorial/3.5.php